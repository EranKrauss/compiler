;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
;;; This pointer is used to manage allocations on our heap.
malloc_pointer:
    resq 1

;;; here we REServe enough Quad-words (64-bit "cells") for the free variables
;;; each free variable has 8 bytes reserved for a 64-bit pointer to its value
fvar_tbl:
    resq 49

section .data
const_tbl:
MAKE_VOID
MAKE_NIL
MAKE_BOOL(0)
MAKE_BOOL(1)
MAKE_LITERAL_STRING "whatever"
MAKE_LITERAL_SYMBOL(const_tbl + 6)
MAKE_LITERAL_CHAR(0)
MAKE_LITERAL_RATIONAL(0,1)
MAKE_LITERAL_RATIONAL(1,1)
MAKE_LITERAL_RATIONAL(-1,1)
MAKE_LITERAL_RATIONAL(5,1)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl+0
%define SOB_NIL_ADDRESS const_tbl+1
%define SOB_FALSE_ADDRESS const_tbl+2
%define SOB_TRUE_ADDRESS const_tbl+4

global main
section .text
main:
    ;; set up the heap
    mov rdi, GB(2)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0                ; argument count
    push SOB_NIL_ADDRESS  ; lexical environment address
    push T_UNDEFINED      ; return address
    push rbp                    
    mov rbp, rsp                ; anchor the dummy frame

    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we simulate the missing (define ...) expressions
    ;; for all the primitive procedures.
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, boolean?)
mov [fvar_tbl+8*0], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, flonum?)
mov [fvar_tbl+8*1], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, rational?)
mov [fvar_tbl+8*2], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, pair?)
mov [fvar_tbl+8*3], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, null?)
mov [fvar_tbl+8*4], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char?)
mov [fvar_tbl+8*5], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string?)
mov [fvar_tbl+8*6], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, procedure?)
mov [fvar_tbl+8*7], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol?)
mov [fvar_tbl+8*8], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
mov [fvar_tbl+8*9], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
mov [fvar_tbl+8*10], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
mov [fvar_tbl+8*11], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
mov [fvar_tbl+8*12], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
mov [fvar_tbl+8*13], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
mov [fvar_tbl+8*14], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
mov [fvar_tbl+8*15], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, exact_to_inexact)
mov [fvar_tbl+8*16], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq?)
mov [fvar_tbl+8*17], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, add)
mov [fvar_tbl+8*18], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, mul)
mov [fvar_tbl+8*19], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, div)
mov [fvar_tbl+8*20], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq)
mov [fvar_tbl+8*21], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, lt)
mov [fvar_tbl+8*22], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, numerator)
mov [fvar_tbl+8*23], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, denominator)
mov [fvar_tbl+8*24], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, gcd)
mov [fvar_tbl+8*25], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
mov [fvar_tbl+8*26], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr)
mov [fvar_tbl+8*27], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
mov [fvar_tbl+8*28], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
mov [fvar_tbl+8*29], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
mov [fvar_tbl+8*30], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
mov [fvar_tbl+8*31], rax

user_code_fragment:
;;; The code you compiled will be added here.
;;; It will be executed immediately after the closures for 
;;; the primitive procedures are set up.
;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 224]
push rax
mov rax, qword [fvar_tbl + 232]
push rax
mov rax, qword [fvar_tbl + 216]
push rax
mov rax, qword [fvar_tbl + 208]
push rax
mov rax, qword [fvar_tbl + 32]
push rax

            push 5  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 41; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode1)
 pop r8
         
 jmp Lcont1
 Lcode1:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +23; insert const from const table to rax
push rax
mov rax, const_tbl +23; insert const from const table to rax
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode3)
 pop r8
         
 jmp Lcont3
 Lcode3:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 32], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 40]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 40], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode5)
 pop r8
         
 jmp Lcont5
 Lcode5:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_6
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_6:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_7
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_7:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse0
mov rax, const_tbl +1; insert const from const table to rax
 jmp Lexit3
Lelse0:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
        
 mov rax, qword [rax]
        
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_16
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_16:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_17
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_17:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
        
 mov rax, qword [rax]
        
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_12
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_12:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_13
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_13:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_9
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop2:
              cmp rcx, rsp            ;end of new stack
              jl Change2
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop2
Change2:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_9:
        ;                           finish generate applic tp
Lexit3:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont5:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 32]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode7)
 pop r8
         
 jmp Lcont7
 Lcode7:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_20
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_20:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse1
mov rax, const_tbl +1; insert const from const table to rax
 jmp Lexit18
Lelse1:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_29
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_29:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
        
 mov rax, qword [rax]
        
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_30
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_30:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_25
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_25:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_26
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_26:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_22
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop4:
              cmp rcx, rsp            ;end of new stack
              jl Change4
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop4
Change4:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_22:
        ;                           finish generate applic tp
Lexit18:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont7:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 40]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS

 ; generate lambda opt
          
 MALLOC rax, 24
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax
         
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode9)
 pop r8
         
 jmp Lcont9
 Lcode9:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 1, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 1)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_33
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop6:
              cmp rcx, rsp            ;end of new stack
              jl Change6
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop6
Change6:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_33:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont9:

 leave
             
 ret
         
 Lcont3:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_2
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop0:
              cmp rcx, rsp            ;end of new stack
              jl Change0
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop0
Change0:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_2:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont1:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_34
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_34:
            ;                     finish generate applic
mov [fvar_tbl+32*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 32]
push rax
mov rax, qword [fvar_tbl + 216]
push rax
mov rax, qword [fvar_tbl + 208]
push rax

            push 3  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode10)
 pop r8
         
 jmp Lcont11
 Lcode10:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +23; insert const from const table to rax
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode12)
 pop r8
         
 jmp Lcont13
 Lcode12:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 32], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode14)
 pop r8
         
 jmp Lcont15
 Lcode14:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 48]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_40
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_40:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse2
mov rax, qword [rbp + 40]
 jmp Lexit38
Lelse2:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 48]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_48
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_48:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 48]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_45
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_45:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 40]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_46
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_46:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 3;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_42
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop10:
              cmp rcx, rsp            ;end of new stack
              jl Change10
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop10
Change10:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_42:
        ;                           finish generate applic tp
Lexit38:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont15:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 32]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode16)
 pop r8
         
 jmp Lcont17
 Lcode16:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 48]
push rax
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 3;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_50
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop12:
              cmp rcx, rsp            ;end of new stack
              jl Change12
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop12
Change12:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_50:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont17:
         ;                    finish generate lambda simple

 leave
             
 ret
         
 Lcont13:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_37
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop8:
              cmp rcx, rsp            ;end of new stack
              jl Change8
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop8
Change8:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_37:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont11:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_51
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_51:
            ;                     finish generate applic
mov [fvar_tbl+33*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 32]
push rax
mov rax, qword [fvar_tbl + 216]
push rax
mov rax, qword [fvar_tbl + 208]
push rax

            push 3  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode18)
 pop r8
         
 jmp Lcont19
 Lcode18:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +23; insert const from const table to rax
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode20)
 pop r8
         
 jmp Lcont21
 Lcode20:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 32], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode22)
 pop r8
         
 jmp Lcont23
 Lcode22:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 48]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_57
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_57:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse3
mov rax, qword [rbp + 40]
 jmp Lexit55
Lelse3:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 48]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_64
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_64:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 3  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_65
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_65:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 48]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_61
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_61:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 32]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_59
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop16:
              cmp rcx, rsp            ;end of new stack
              jl Change16
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop16
Change16:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_59:
        ;                           finish generate applic tp
Lexit55:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont23:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 32]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode24)
 pop r8
         
 jmp Lcont25
 Lcode24:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 48]
push rax
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 3;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_67
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop18:
              cmp rcx, rsp            ;end of new stack
              jl Change18
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop18
Change18:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_67:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont25:
         ;                    finish generate lambda simple

 leave
             
 ret
         
 Lcont21:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_54
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop14:
              cmp rcx, rsp            ;end of new stack
              jl Change14
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop14
Change14:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_54:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont19:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_68
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_68:
            ;                     finish generate applic
mov [fvar_tbl+34*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 232]
push rax
mov rax, qword [fvar_tbl + 272]
push rax
mov rax, qword [fvar_tbl + 32]
push rax

            push 3  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode26)
 pop r8
         
 jmp Lcont27
 Lcode26:
 push rbp
             
 mov rbp, rsp
             
 
 ; generate lambda opt
          
 MALLOC rax, 16
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax
         
; MALLOC rax, 1; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode28)
 pop r8
         
 jmp Lcont29
 Lcode28:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 0, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 0)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 32]
push rax
mov rax, const_tbl +1; insert const from const table to rax
push rax
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode29)
 pop r8
         
 jmp Lcont31
 Lcode29:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_75
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_75:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse4
mov rax, qword [rbp + 32]
 jmp Lexit73
Lelse4:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 32]
push rax
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
push rax

            push 3;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_77
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop22:
              cmp rcx, rsp            ;end of new stack
              jl Change22
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop22
Change22:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_77:
        ;                           finish generate applic tp
Lexit73:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont31:
         ;                    finish generate lambda simple
push rax

            push 3;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_72
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop20:
              cmp rcx, rsp            ;end of new stack
              jl Change20
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop20
Change20:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_72:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont29:
 leave
             
 ret
         
 Lcont27:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_78
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_78:
            ;                     finish generate applic
mov [fvar_tbl+35*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define

 ; generate lambda opt
          
 MALLOC rax, 8
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 push rax
         
; MALLOC rax, 1; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode31)
 pop r8
         
 jmp Lcont33
 Lcode31:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 0, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 0)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 mov rax, qword [rbp + 32]
 leave
             
 ret
         
 Lcont33:
mov [fvar_tbl+36*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 216]
push rax
mov rax, qword [fvar_tbl + 24]
push rax
mov rax, qword [fvar_tbl + 32]
push rax

            push 3  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode32)
 pop r8
         
 jmp Lcont35
 Lcode32:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +23; insert const from const table to rax
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode34)
 pop r8
         
 jmp Lcont37
 Lcode34:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 32], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode36)
 pop r8
         
 jmp Lcont39
 Lcode36:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_85
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_85:
            ;                     finish generate applic
cmp rax, SOB_FALSE_ADDRESS
                                                                
 jne Lexit84
;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_88
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_88:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse5
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_92
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_92:
            ;                     finish generate applic
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_90
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop26:
              cmp rcx, rsp            ;end of new stack
              jl Change26
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop26
Change26:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_90:
        ;                           finish generate applic tp
 jmp Lexit86
Lelse5:
mov rax, const_tbl +2; insert const from const table to rax
Lexit86:
             ;                  finish generate if

Lexit84:
 leave
             
 ret
         
 Lcont39:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 32]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 32]
        
 mov rax, qword [rax]
        

 leave
             
 ret
         
 Lcont37:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_82
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop24:
              cmp rcx, rsp            ;end of new stack
              jl Change24
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop24
Change24:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_82:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont35:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_93
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_93:
            ;                     finish generate applic
mov [fvar_tbl+37*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 96]
push rax
mov rax, qword [fvar_tbl + 208]
push rax
mov rax, qword [fvar_tbl + 32]
push rax

            push 3  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode38)
 pop r8
         
 jmp Lcont41
 Lcode38:
 push rbp
             
 mov rbp, rsp
             
 
 ; generate lambda opt
          
 MALLOC rax, 16
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax
         
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode40)
 pop r8
         
 jmp Lcont43
 Lcode40:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 1, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 1)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_98
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_98:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse6
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +32; insert const from const table to rax
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_100
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop28:
              cmp rcx, rsp            ;end of new stack
              jl Change28
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop28
Change28:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_100:
        ;                           finish generate applic tp
 jmp Lexit96
Lelse6:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_104
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_104:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_102
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop30:
              cmp rcx, rsp            ;end of new stack
              jl Change30
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop30
Change30:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_102:
        ;                           finish generate applic tp
Lexit96:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont43:
 leave
             
 ret
         
 Lcont41:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_105
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_105:
            ;                     finish generate applic
mov [fvar_tbl+12*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode41)
 pop r8
         
 jmp Lcont45
 Lcode41:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate ifmov rax, qword [rbp + 32]
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse7
mov rax, const_tbl +2; insert const from const table to rax
 jmp Lexit106
Lelse7:
mov rax, const_tbl +4; insert const from const table to rax
Lexit106:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont45:
         ;                    finish generate lambda simple
mov [fvar_tbl+38*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 32]
push rax
mov rax, qword [fvar_tbl + 216]
push rax
mov rax, qword [fvar_tbl + 208]
push rax
mov rax, qword [fvar_tbl + 176]
push rax
mov rax, qword [fvar_tbl + 168]
push rax
mov rax, qword [fvar_tbl + 160]
push rax
mov rax, qword [fvar_tbl + 152]
push rax
mov rax, qword [fvar_tbl + 144]
push rax
mov rax, qword [fvar_tbl + 256]
push rax
mov rax, qword [fvar_tbl + 264]
push rax
mov rax, qword [fvar_tbl + 128]
push rax
mov rax, qword [fvar_tbl + 16]
push rax
mov rax, qword [fvar_tbl + 8]
push rax

            push 13  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 105; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode43)
 pop r8
         
 jmp Lcont47
 Lcode43:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode45)
 pop r8
         
 jmp Lcont49
 Lcode45:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode47)
 pop r8
         
 jmp Lcont51
 Lcode47:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_113
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_113:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse9
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_115
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_115:
            ;                     finish generate applic
 jmp Lexit111
Lelse9:
mov rax, const_tbl +2; insert const from const table to rax
Lexit111:
             ;                  finish generate if
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse8
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_119
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_119:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_117
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop34:
              cmp rcx, rsp            ;end of new stack
              jl Change34
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop34
Change34:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_117:
        ;                           finish generate applic tp
 jmp Lexit110
Lelse8:
;                  generate if;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_123
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_123:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse11
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_125
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_125:
            ;                     finish generate applic
 jmp Lexit121
Lelse11:
mov rax, const_tbl +2; insert const from const table to rax
Lexit121:
             ;                  finish generate if
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse10
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 40]
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_129
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_129:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_127
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop36:
              cmp rcx, rsp            ;end of new stack
              jl Change36
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop36
Change36:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_127:
        ;                           finish generate applic tp
 jmp Lexit120
Lelse10:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_131
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop38:
              cmp rcx, rsp            ;end of new stack
              jl Change38
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop38
Change38:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_131:
        ;                           finish generate applic tp
Lexit120:
             ;                  finish generate if
Lexit110:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont51:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont49:
         ;                    finish generate lambda simple
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode49)
 pop r8
         
 jmp Lcont53
 Lcode49:
 push rbp
             
 mov rbp, rsp
             
 
 ; generate lambda opt
          
 MALLOC rax, 24
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax
         
; MALLOC rax, 1; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode51)
 pop r8
         
 jmp Lcont55
 Lcode51:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 0, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 0)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 32]
push rax
mov rax, const_tbl +34; insert const from const table to rax
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_136
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_136:
            ;                     finish generate applic
push rax

            push 3;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_134
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop40:
              cmp rcx, rsp            ;end of new stack
              jl Change40
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop40
Change40:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_134:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont55:
 mov qword [fvar_tbl + 144], rax
                                                  
 mov rax, SOB_VOID_ADDRESS

 ; generate lambda opt
          
 MALLOC rax, 24
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax
         
; MALLOC rax, 1; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode52)
 pop r8
         
 jmp Lcont57
 Lcode52:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 0, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 0)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 32]
push rax
mov rax, const_tbl +51; insert const from const table to rax
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +48]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_141
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_141:
            ;                     finish generate applic
push rax

            push 3;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_139
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop42:
              cmp rcx, rsp            ;end of new stack
              jl Change42
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop42
Change42:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_139:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont57:
 mov qword [fvar_tbl + 152], rax
                                                  
 mov rax, SOB_VOID_ADDRESS
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +56]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_144
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_144:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode53)
 pop r8
         
 jmp Lcont59
 Lcode53:
 push rbp
             
 mov rbp, rsp
             
 
 ; generate lambda opt
          
 MALLOC rax, 32
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 mov qword rdx, [rbx +16]
                                       
 mov qword [rax+ 24], rdx
 push rax
         
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode55)
 pop r8
         
 jmp Lcont61
 Lcode55:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 1, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 1)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +16]
                                                              
 mov rax, qword[rax +96]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_148
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_148:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse12
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 32]
push rax
mov rax, const_tbl +51; insert const from const table to rax
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_150
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop44:
              cmp rcx, rsp            ;end of new stack
              jl Change44
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop44
Change44:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_150:
        ;                           finish generate applic tp
 jmp Lexit146
Lelse12:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 3;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +16]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_152
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop46:
              cmp rcx, rsp            ;end of new stack
              jl Change46
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop46
Change46:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_152:
        ;                           finish generate applic tp
Lexit146:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont61:
 leave
             
 ret
         
 Lcont59:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_153
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_153:
            ;                     finish generate applic
 mov qword [fvar_tbl + 160], rax
                                                  
 mov rax, SOB_VOID_ADDRESS
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode56)
 pop r8
         
 jmp Lcont63
 Lcode56:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +23; insert const from const table to rax
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 32 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 mov qword rdx, [rbx +16]
                                       
 mov qword [rax+ 24], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode58)
 pop r8
         
 jmp Lcont65
 Lcode58:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 32], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 40 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 mov qword rdx, [rbx +16]
                                       
 mov qword [rax+ 24], rdx
 mov qword rdx, [rbx +24]
                                       
 mov qword [rax+ 32], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode60)
 pop r8
         
 jmp Lcont67
 Lcode60:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +24]
                                                              
 mov rax, qword[rax +96]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_160
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_160:
            ;                     finish generate applic
cmp rax, SOB_FALSE_ADDRESS
                                                                
 jne Lexit159
;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +24]
                                                              
 mov rax, qword[rax +80]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_164
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_164:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_165
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_165:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse13
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +24]
                                                              
 mov rax, qword[rax +88]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_171
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_171:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +24]
                                                              
 mov rax, qword[rax +80]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_169
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_169:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_167
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop52:
              cmp rcx, rsp            ;end of new stack
              jl Change52
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop52
Change52:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_167:
        ;                           finish generate applic tp
 jmp Lexit161
Lelse13:
mov rax, const_tbl +2; insert const from const table to rax
Lexit161:
             ;                  finish generate if

Lexit159:
 leave
             
 ret
         
 Lcont67:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 32]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS

 ; generate lambda opt
          
 MALLOC rax, 40
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 mov qword rdx, [rbx +16]
                                       
 mov qword [rax+ 24], rdx
 mov qword rdx, [rbx +24]
                                       
 mov qword [rax+ 32], rdx
 push rax
         
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode62)
 pop r8
         
 jmp Lcont69
 Lcode62:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 1, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 1)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_174
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop54:
              cmp rcx, rsp            ;end of new stack
              jl Change54
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop54
Change54:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_174:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont69:

 leave
             
 ret
         
 Lcont65:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_157
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop50:
              cmp rcx, rsp            ;end of new stack
              jl Change50
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop50
Change50:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_157:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont63:
         ;                    finish generate lambda simple
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode63)
 pop r8
         
 jmp Lcont71
 Lcode63:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +64]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_177
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_177:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_178
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_178:
            ;                     finish generate applic
 mov qword [fvar_tbl + 168], rax
                                                  
 mov rax, SOB_VOID_ADDRESS
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +72]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_181
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_181:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_182
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_182:
            ;                     finish generate applic
 mov qword [fvar_tbl + 176], rax
                                                  
 mov rax, SOB_VOID_ADDRESS

 leave
             
 ret
         
 Lcont71:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_155
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop48:
              cmp rcx, rsp            ;end of new stack
              jl Change48
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop48
Change48:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_155:
        ;                           finish generate applic tp

 leave
             
 ret
         
 Lcont53:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_109
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop32:
              cmp rcx, rsp            ;end of new stack
              jl Change32
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop32
Change32:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_109:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont47:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_183
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_183:
            ;                     finish generate applic
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 32]
push rax
mov rax, qword [fvar_tbl + 144]
push rax
mov rax, qword [fvar_tbl + 224]
push rax

            push 3  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode65)
 pop r8
         
 jmp Lcont73
 Lcode65:
 push rbp
             
 mov rbp, rsp
             
 
 ; generate lambda opt
          
 MALLOC rax, 16
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax
         
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode67)
 pop r8
         
 jmp Lcont75
 Lcode67:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 1, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 1)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_188
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_188:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse14
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax
mov rax, const_tbl +68; insert const from const table to rax
push rax

            push 2  ; number of args
mov rax, qword [fvar_tbl + 152]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_192
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_192:
            ;                     finish generate applic
push rax
mov rax, const_tbl +34; insert const from const table to rax
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_190
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop56:
              cmp rcx, rsp            ;end of new stack
              jl Change56
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop56
Change56:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_190:
        ;                           finish generate applic tp
 jmp Lexit186
Lelse14:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_197
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_197:
            ;                     finish generate applic
push rax
mov rax, const_tbl +68; insert const from const table to rax
push rax

            push 2  ; number of args
mov rax, qword [fvar_tbl + 152]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_198
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_198:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_194
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop58:
              cmp rcx, rsp            ;end of new stack
              jl Change58
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop58
Change58:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_194:
        ;                           finish generate applic tp
Lexit186:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont75:
 leave
             
 ret
         
 Lcont73:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_199
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_199:
            ;                     finish generate applic
mov [fvar_tbl+39*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 168]
push rax
mov rax, qword [fvar_tbl + 176]
push rax
mov rax, qword [fvar_tbl + 216]
push rax
mov rax, qword [fvar_tbl + 208]
push rax
mov rax, qword [fvar_tbl + 304]
push rax
mov rax, qword [fvar_tbl + 32]
push rax

            push 6  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 49; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode68)
 pop r8
         
 jmp Lcont77
 Lcode68:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +23; insert const from const table to rax
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode70)
 pop r8
         
 jmp Lcont79
 Lcode70:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 32], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode72)
 pop r8
         
 jmp Lcont81
 Lcode72:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_205
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_205:
            ;                     finish generate applic
cmp rax, SOB_FALSE_ADDRESS
                                                                
 jne Lexit204
;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_210
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_210:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_211
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_211:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_212
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_212:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse15
;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_217
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_217:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +40]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_218
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_218:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_219
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_219:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse16
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_225
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_225:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_223
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_223:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_221
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop62:
              cmp rcx, rsp            ;end of new stack
              jl Change62
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop62
Change62:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_221:
        ;                           finish generate applic tp
 jmp Lexit213
Lelse16:
mov rax, const_tbl +2; insert const from const table to rax
Lexit213:
             ;                  finish generate if
 jmp Lexit206
Lelse15:
mov rax, const_tbl +2; insert const from const table to rax
Lexit206:
             ;                  finish generate if

Lexit204:
 leave
             
 ret
         
 Lcont81:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 32]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS

 ; generate lambda opt
          
 MALLOC rax, 24
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax
         
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode74)
 pop r8
         
 jmp Lcont83
 Lcode74:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 1, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 1)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_228
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop64:
              cmp rcx, rsp            ;end of new stack
              jl Change64
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop64
Change64:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_228:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont83:

 leave
             
 ret
         
 Lcont79:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_202
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop60:
              cmp rcx, rsp            ;end of new stack
              jl Change60
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop60
Change60:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_202:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont77:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_229
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_229:
            ;                     finish generate applic
mov [fvar_tbl+40*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 216]
push rax
mov rax, qword [fvar_tbl + 208]
push rax
mov rax, qword [fvar_tbl + 32]
push rax
mov rax, qword [fvar_tbl + 200]
push rax

            push 4  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 33; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode75)
 pop r8
         
 jmp Lcont85
 Lcode75:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +23; insert const from const table to rax
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode77)
 pop r8
         
 jmp Lcont87
 Lcode77:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 32], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode79)
 pop r8
         
 jmp Lcont89
 Lcode79:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_235
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_235:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse17
mov rax, qword [rbp + 32]
 jmp Lexit233
Lelse17:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_243
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_243:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_240
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_240:
            ;                     finish generate applic
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_241
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_241:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_237
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop68:
              cmp rcx, rsp            ;end of new stack
              jl Change68
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop68
Change68:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_237:
        ;                           finish generate applic tp
Lexit233:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont89:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 32]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS

 ; generate lambda opt
          
 MALLOC rax, 24
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax
         
; MALLOC rax, 1; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode81)
 pop r8
         
 jmp Lcont91
 Lcode81:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 0, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 0)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_247
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_247:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse18
mov rax, const_tbl +34; insert const from const table to rax
 jmp Lexit245
Lelse18:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_253
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_253:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_251
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_251:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_249
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop70:
              cmp rcx, rsp            ;end of new stack
              jl Change70
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop70
Change70:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_249:
        ;                           finish generate applic tp
Lexit245:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont91:

 leave
             
 ret
         
 Lcont87:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_232
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop66:
              cmp rcx, rsp            ;end of new stack
              jl Change66
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop66
Change66:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_232:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont85:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_254
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_254:
            ;                     finish generate applic
mov [fvar_tbl+25*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 168]
push rax

            push 1  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode82)
 pop r8
         
 jmp Lcont93
 Lcode82:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode84)
 pop r8
         
 jmp Lcont95
 Lcode84:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +34; insert const from const table to rax
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_257
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop72:
              cmp rcx, rsp            ;end of new stack
              jl Change72
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop72
Change72:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_257:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont95:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont93:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_258
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_258:
            ;                     finish generate applic
mov [fvar_tbl+41*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 192]
push rax
mov rax, qword [fvar_tbl + 168]
push rax
mov rax, qword [fvar_tbl + 16]
push rax

            push 3  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode86)
 pop r8
         
 jmp Lcont97
 Lcode86:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode88)
 pop r8
         
 jmp Lcont99
 Lcode88:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_262
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_262:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse19
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +51; insert const from const table to rax
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_266
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_266:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_264
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop74:
              cmp rcx, rsp            ;end of new stack
              jl Change74
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop74
Change74:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_264:
        ;                           finish generate applic tp
 jmp Lexit260
Lelse19:
mov rax, const_tbl +2; insert const from const table to rax
Lexit260:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont99:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont97:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_267
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_267:
            ;                     finish generate applic
mov [fvar_tbl+42*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 16]
push rax
mov rax, qword [fvar_tbl + 8]
push rax

            push 2  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode90)
 pop r8
         
 jmp Lcont101
 Lcode90:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode92)
 pop r8
         
 jmp Lcont103
 Lcode92:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_271
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_271:
            ;                     finish generate applic
cmp rax, SOB_FALSE_ADDRESS
                                                                
 jne Lexit270
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 32]
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_273
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop76:
              cmp rcx, rsp            ;end of new stack
              jl Change76
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop76
Change76:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_273:
        ;                           finish generate applic tp

Lexit270:
 leave
             
 ret
         
 Lcont103:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont101:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_274
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_274:
            ;                     finish generate applic
mov [fvar_tbl+43*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 144]
push rax
mov rax, qword [fvar_tbl + 264]
push rax

            push 2  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode94)
 pop r8
         
 jmp Lcont105
 Lcode94:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode96)
 pop r8
         
 jmp Lcont107
 Lcode96:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 32]
push rax
mov rax, const_tbl +34; insert const from const table to rax
push rax
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode98)
 pop r8
         
 jmp Lcont109
 Lcode98:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +51; insert const from const table to rax
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_279
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop80:
              cmp rcx, rsp            ;end of new stack
              jl Change80
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop80
Change80:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_279:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont109:
         ;                    finish generate lambda simple
push rax

            push 3;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_277
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop78:
              cmp rcx, rsp            ;end of new stack
              jl Change78
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop78
Change78:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_277:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont107:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont105:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_280
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_280:
            ;                     finish generate applic
mov [fvar_tbl+44*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 232]
push rax
mov rax, qword [fvar_tbl + 312]
push rax
mov rax, qword [fvar_tbl + 176]
push rax
mov rax, qword [fvar_tbl + 72]
push rax
mov rax, qword [fvar_tbl + 80]
push rax

            push 5  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 41; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode100)
 pop r8
         
 jmp Lcont111
 Lcode100:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode102)
 pop r8
         
 jmp Lcont113
 Lcode102:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +23; insert const from const table to rax
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode104)
 pop r8
         
 jmp Lcont115
 Lcode104:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 32], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 32 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 mov qword rdx, [rbx +16]
                                       
 mov qword [rax+ 24], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode106)
 pop r8
         
 jmp Lcont117
 Lcode106:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, const_tbl +34; insert const from const table to rax
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +16]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_286
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_286:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse20
mov rax, qword [rbp + 40]
 jmp Lexit284
Lelse20:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +16]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_293
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_293:
            ;                     finish generate applic
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +16]
                                                              
 mov rax, qword[rax +32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_294
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_294:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, const_tbl +51; insert const from const table to rax
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +16]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_290
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_290:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_288
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop84:
              cmp rcx, rsp            ;end of new stack
              jl Change84
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop84
Change84:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_288:
        ;                           finish generate applic tp
Lexit284:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont117:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 32]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +1; insert const from const table to rax
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, const_tbl +51; insert const from const table to rax
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_299
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_299:
            ;                     finish generate applic
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_300
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_300:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 32]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_296
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop86:
              cmp rcx, rsp            ;end of new stack
              jl Change86
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop86
Change86:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_296:
        ;                           finish generate applic tp

 leave
             
 ret
         
 Lcont115:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_283
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop82:
              cmp rcx, rsp            ;end of new stack
              jl Change82
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop82
Change82:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_283:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont113:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont111:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_301
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_301:
            ;                     finish generate applic
mov [fvar_tbl+45*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 112]
push rax
mov rax, qword [fvar_tbl + 216]
push rax
mov rax, qword [fvar_tbl + 208]
push rax
mov rax, qword [fvar_tbl + 136]
push rax
mov rax, qword [fvar_tbl + 48]
push rax
mov rax, qword [fvar_tbl + 40]
push rax
mov rax, qword [fvar_tbl + 24]
push rax
mov rax, qword [fvar_tbl + 8]
push rax
mov rax, qword [fvar_tbl + 16]
push rax
mov rax, qword [fvar_tbl + 360]
push rax
mov rax, qword [fvar_tbl + 168]
push rax

            push 11  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 89; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode108)
 pop r8
         
 jmp Lcont119
 Lcode108:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +23; insert const from const table to rax
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode110)
 pop r8
         
 jmp Lcont121
 Lcode110:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 32], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode112)
 pop r8
         
 jmp Lcont123
 Lcode112:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_308
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_308:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse22
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_310
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_310:
            ;                     finish generate applic
 jmp Lexit306
Lelse22:
mov rax, const_tbl +2; insert const from const table to rax
Lexit306:
             ;                  finish generate if
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse21
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_312
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop90:
              cmp rcx, rsp            ;end of new stack
              jl Change90
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop90
Change90:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_312:
        ;                           finish generate applic tp
 jmp Lexit305
Lelse21:
;                  generate if;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_316
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_316:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse24
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +24]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_318
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_318:
            ;                     finish generate applic
 jmp Lexit314
Lelse24:
mov rax, const_tbl +2; insert const from const table to rax
Lexit314:
             ;                  finish generate if
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse23
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_320
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop92:
              cmp rcx, rsp            ;end of new stack
              jl Change92
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop92
Change92:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_320:
        ;                           finish generate applic tp
 jmp Lexit313
Lelse23:
;                  generate if;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +40]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_324
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_324:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse26
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +40]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_326
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_326:
            ;                     finish generate applic
 jmp Lexit322
Lelse26:
mov rax, const_tbl +2; insert const from const table to rax
Lexit322:
             ;                  finish generate if
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse25
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +80]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_332
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_332:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +80]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_330
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_330:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_328
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop94:
              cmp rcx, rsp            ;end of new stack
              jl Change94
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop94
Change94:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_328:
        ;                           finish generate applic tp
 jmp Lexit321
Lelse25:
;                  generate if;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_336
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_336:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse28
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_338
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_338:
            ;                     finish generate applic
 jmp Lexit334
Lelse28:
mov rax, const_tbl +2; insert const from const table to rax
Lexit334:
             ;                  finish generate if
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse27
;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +64]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_344
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_344:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +64]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_342
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_342:
            ;                     finish generate applic
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_345
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_345:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse29
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +72]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_351
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_351:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +72]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_349
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_349:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_347
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop96:
              cmp rcx, rsp            ;end of new stack
              jl Change96
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop96
Change96:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_347:
        ;                           finish generate applic tp
 jmp Lexit339
Lelse29:
mov rax, const_tbl +2; insert const from const table to rax
Lexit339:
             ;                  finish generate if
 jmp Lexit333
Lelse27:
;                  generate if;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +48]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_355
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_355:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse31
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +48]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_357
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_357:
            ;                     finish generate applic
 jmp Lexit353
Lelse31:
mov rax, const_tbl +2; insert const from const table to rax
Lexit353:
             ;                  finish generate if
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse30
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_363
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_363:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_361
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_361:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_359
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop98:
              cmp rcx, rsp            ;end of new stack
              jl Change98
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop98
Change98:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_359:
        ;                           finish generate applic tp
 jmp Lexit352
Lelse30:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +56]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_365
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop100:
              cmp rcx, rsp            ;end of new stack
              jl Change100
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop100
Change100:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_365:
        ;                           finish generate applic tp
Lexit352:
             ;                  finish generate if
Lexit333:
             ;                  finish generate if
Lexit321:
             ;                  finish generate if
Lexit313:
             ;                  finish generate if
Lexit305:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont123:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 32]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 32]
        
 mov rax, qword [rax]
        

 leave
             
 ret
         
 Lcont121:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_304
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop88:
              cmp rcx, rsp            ;end of new stack
              jl Change88
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop88
Change88:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_304:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont119:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_366
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_366:
            ;                     finish generate applic
mov [fvar_tbl+46*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [fvar_tbl + 136]
push rax
mov rax, qword [fvar_tbl + 232]
push rax
mov rax, qword [fvar_tbl + 296]
push rax
mov rax, qword [fvar_tbl + 32]
push rax
mov rax, qword [fvar_tbl + 216]
push rax
mov rax, qword [fvar_tbl + 208]
push rax

            push 6  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 49; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode114)
 pop r8
         
 jmp Lcont125
 Lcode114:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +23; insert const from const table to rax
push rax
mov rax, const_tbl +23; insert const from const table to rax
push rax
mov rax, const_tbl +23; insert const from const table to rax
push rax

            push 3;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 25; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode116)
 pop r8
         
 jmp Lcont127
 Lcode116:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 32], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 40]
 MALLOC rbx, 8
        
 mov qword[rbx], rax
        
 mov rax, rbx
        
 mov qword [rbp + 40], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode118)
 pop r8
         
 jmp Lcont129
 Lcode118:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_373
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_373:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_374
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_374:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse32
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 32]
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_376
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop104:
              cmp rcx, rsp            ;end of new stack
              jl Change104
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop104
Change104:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_376:
        ;                           finish generate applic tp
 jmp Lexit370
Lelse32:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_380
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_380:
            ;                     finish generate applic
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_378
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop106:
              cmp rcx, rsp            ;end of new stack
              jl Change106
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop106
Change106:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_378:
        ;                           finish generate applic tp
Lexit370:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont129:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 32]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode120)
 pop r8
         
 jmp Lcont131
 Lcode120:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_384
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_384:
            ;                     finish generate applic
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +40]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_385
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_385:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse33
mov rax, qword [rbp + 40]
 jmp Lexit381
Lelse33:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_392
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_392:
            ;                     finish generate applic
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
        
 mov rax, qword [rax]
        
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_393
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_393:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_389
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_389:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +32]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_387
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop108:
              cmp rcx, rsp            ;end of new stack
              jl Change108
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop108
Change108:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_387:
        ;                           finish generate applic tp
Lexit381:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont131:
         ;                    finish generate lambda simple
 push rax
mov rax, qword [rbp + 40]
 pop qword [rax]    
         
 mov rax, SOB_VOID_ADDRESS

 ; generate lambda opt
          
 MALLOC rax, 24
 push rbx
         
 push rdx
         
 mov qword rbx, [rbp + 8*2]

 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax
         
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
         
 MAKE_CLOSURE (rax , r8, Lcode122)
 pop r8
         
 jmp Lcont133
 Lcode122:
             
 push rbp
             
 mov rbp, rsp
             
 push rdx
             
 push rcx
             
 push rbx
             
 push rax
 OPT_PARAMS 1, SOB_NIL_ADDRESS
 mov qword [rbp+8*(4 + 1)], rdx
             
 pop rax
             
 pop rbx
             
 pop rcx
             
 pop rdx
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +16]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_397
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_397:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse34
mov rax, qword [rbp + 32]
 jmp Lexit395
Lelse34:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
        
 mov rax, qword [rax]
        
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_403
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_403:
            ;                     finish generate applic
push rax
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 40]
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_401
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_401:
            ;                     finish generate applic
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
        
 mov rax, qword [rax]
        
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_399
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop110:
              cmp rcx, rsp            ;end of new stack
              jl Change110
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop110
Change110:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_399:
        ;                           finish generate applic tp
Lexit395:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont133:
 mov qword [rbp + 48], rax
                                                              
 mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 48]

 leave
             
 ret
         
 Lcont127:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_369
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop102:
              cmp rcx, rsp            ;end of new stack
              jl Change102
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop102
Change102:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_369:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont125:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_404
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_404:
            ;                     finish generate applic
mov [fvar_tbl+47*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                      generate define
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode135)
 pop r8
         
 jmp Lcont147
 Lcode135:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode137)
 pop r8
         
 jmp Lcont149
 Lcode137:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate if;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [fvar_tbl + 328]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_419
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_419:
            ;                     finish generate applic
 cmp rax, SOB_FALSE_ADDRESS
             
 je Lelse35
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode139)
 pop r8
         
 jmp Lcont151
 Lcode139:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 32 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 mov qword rdx, [rbx +16]
                                       
 mov qword [rax+ 24], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode141)
 pop r8
         
 jmp Lcont153
 Lcode141:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 32]
 leave
             
 ret
         
 Lcont153:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont151:
         ;                    finish generate lambda simple
 jmp Lexit417
Lelse35:
;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, const_tbl +51; insert const from const table to rax
push rax
mov rax, qword [rbp + 32]
push rax

            push 2  ; number of args
mov rax, qword [fvar_tbl + 312]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_424
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_424:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_426
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_426:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_427
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_427:
            ;                     finish generate applic
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode143)
 pop r8
         
 jmp Lcont155
 Lcode143:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 32 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 mov qword rdx, [rbx +16]
                                       
 mov qword [rax+ 24], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode145)
 pop r8
         
 jmp Lcont157
 Lcode145:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 40 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 mov qword rdx, [rbx +16]
                                       
 mov qword [rax+ 24], rdx
 mov qword rdx, [rbx +24]
                                       
 mov qword [rax+ 32], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode147)
 pop r8
         
 jmp Lcont159
 Lcode147:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_432
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_432:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_433
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_433:
            ;                     finish generate applic
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_429
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop118:
              cmp rcx, rsp            ;end of new stack
              jl Change118
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop118
Change118:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_429:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont159:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont157:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont155:
         ;                    finish generate lambda simple
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_421
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop116:
              cmp rcx, rsp            ;end of new stack
              jl Change116
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop116
Change116:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_421:
        ;                           finish generate applic tp
Lexit417:
             ;                  finish generate if
 leave
             
 ret
         
 Lcont149:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont147:
         ;                    finish generate lambda simple
push rax

            push 1  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode149)
 pop r8
         
 jmp Lcont161
 Lcode149:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, qword [rbp + 32]
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [rbp + 32]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_435
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop120:
              cmp rcx, rsp            ;end of new stack
              jl Change120
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop120
Change120:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_435:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont161:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_436
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_436:
            ;                     finish generate applic
push rax
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode123)
 pop r8
         
 jmp Lcont135
 Lcode123:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode125)
 pop r8
         
 jmp Lcont137
 Lcode125:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode127)
 pop r8
         
 jmp Lcont139
 Lcode127:
 push rbp
             
 mov rbp, rsp
             
 mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
 leave
             
 ret
         
 Lcont139:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont137:
         ;                    finish generate lambda simple
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode129)
 pop r8
         
 jmp Lcont141
 Lcode129:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode131)
 pop r8
         
 jmp Lcont143
 Lcode131:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 32 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 mov qword rdx, [rbx +16]
                                       
 mov qword [rax+ 24], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode133)
 pop r8
         
 jmp Lcont145
 Lcode133:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_412
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_412:
            ;                     finish generate applic
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +8]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_414
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_414:
            ;                     finish generate applic
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_410
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop114:
              cmp rcx, rsp            ;end of new stack
              jl Change114
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop114
Change114:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_410:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont145:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont143:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont141:
         ;                    finish generate lambda simple
push rax

            push 1  ; number of args
mov rax, qword [rbp + 32]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_415
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_415:
            ;                     finish generate applic
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_407
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop112:
              cmp rcx, rsp            ;end of new stack
              jl Change112
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop112
Change112:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_407:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont135:
         ;                    finish generate lambda simple
push rax

            push 2  ; number of args
;                   generate lambda simple
         MALLOC rax, 8 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 push rax ; save pointer to _ env
          
; MALLOC rax, 17; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode151)
 pop r8
         
 jmp Lcont163
 Lcode151:
 push rbp
             
 mov rbp, rsp
             
 ;                   generate lambda simple
         MALLOC rax, 16 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode153)
 pop r8
         
 jmp Lcont165
 Lcode153:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +34; insert const from const table to rax
push rax

            push 1;    push number of rands to stack
             ;                  gen rator
            ;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                   generate lambda simple
         MALLOC rax, 24 ; rax is pointer to _ env

         push rbx
         push rdx
         mov qword rbx, [rbp + 8*2] ; get curr env
 mov qword rdx, [rbx +0]
                                       
 mov qword [rax+ 8], rdx
 mov qword rdx, [rbx +8]
                                       
 mov qword [rax+ 16], rdx
 push rax ; save pointer to _ env
          
; MALLOC rax, 9; num of params
         mov rcx, [rbp + 8*3]     ;;father function argc
         lea rax, [8*rcx]
         MALLOC rax, rax    ;;pointer to new params array
         cmp rcx, 0
         je .end_loop
         mov r9, 0
         .loop:
            mov r10, [rbp + 8*(4+r9)]
            mov [rax + 8*r9], r10
            inc r9
            loop .loop
          .end_loop:
         
 mov rdx, rax
         
 pop rax
         
 mov qword [rax], rdx ; insert pointer to param's arr to _ env[0]
         
 pop rdx 
         
 pop rbx
         
 push r8
         
 mov r8, rax
 MAKE_CLOSURE(rax ,r8, Lcode155)
 pop r8
         
 jmp Lcont167
 Lcode155:
 push rbp
             
 mov rbp, rsp
             
 ;                  generate applic tp
push SOB_NIL_ADDRESS ; magic 
mov rax, const_tbl +51; insert const from const table to rax
push rax
mov rax, qword [rbp + 32]
push rax

            push 2;    push number of rands to stack
             ;                  gen rator
            mov rax, qword [fvar_tbl + 144]
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_441
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop124:
              cmp rcx, rsp            ;end of new stack
              jl Change124
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop124
Change124:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_441:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont167:
         ;                    finish generate lambda simple
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 32]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +8]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_444
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_444:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_451
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_451:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_452
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_452:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_453
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_453:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_458
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_458:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_459
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_459:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_460
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_460:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_465
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_465:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_466
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_466:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_467
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_467:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_468
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_468:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_469
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_469:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_470
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_470:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_474
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_474:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_475
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_475:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_476
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_476:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_477
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_477:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_487
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_487:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_488
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_488:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_489
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_489:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_494
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_494:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_495
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_495:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_496
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_496:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_501
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_501:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_502
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_502:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_503
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_503:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_504
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_504:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_505
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_505:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_506
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_506:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_510
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_510:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_511
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_511:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_512
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_512:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_513
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_513:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_519
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_519:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_520
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_520:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_521
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_521:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_528
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_528:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_529
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_529:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_530
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_530:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_531
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_531:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_535
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_535:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_536
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_536:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_537
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_537:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_538
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_538:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_543
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_543:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_544
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_544:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_545
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_545:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_546
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_546:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_547
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_547:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_548
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_548:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_553
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_553:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_554
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_554:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_555
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_555:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_556
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_556:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_557
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_557:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_558
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_558:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_566
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_566:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_567
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_567:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_568
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_568:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_573
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_573:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_574
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_574:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_575
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_575:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_580
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_580:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_581
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_581:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_582
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_582:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_583
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_583:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_584
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_584:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_585
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_585:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_589
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_589:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_590
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_590:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_591
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_591:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_592
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_592:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_598
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_598:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_599
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_599:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_600
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_600:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_607
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_607:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_608
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_608:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_609
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_609:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_610
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_610:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_614
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_614:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_615
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_615:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_616
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_616:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_617
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_617:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_622
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_622:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_623
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_623:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_624
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_624:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_625
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_625:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_626
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_626:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_627
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_627:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_632
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_632:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_633
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_633:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_634
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_634:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_635
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_635:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_636
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_636:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_637
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_637:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_644
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_644:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_645
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_645:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_646
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_646:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_651
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_651:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_652
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_652:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_653
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_653:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_658
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_658:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_659
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_659:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_660
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_660:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_661
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_661:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_662
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_662:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_663
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_663:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_669
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_669:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_670
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_670:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_671
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_671:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_675
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_675:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_676
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_676:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_677
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_677:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_678
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_678:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_686
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_686:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_687
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_687:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_688
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_688:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_689
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_689:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_695
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_695:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_696
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_696:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_697
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_697:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_701
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_701:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_702
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_702:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_703
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_703:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_704
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_704:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_709
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_709:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_710
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_710:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_711
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_711:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_712
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_712:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_713
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_713:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_714
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_714:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_721
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_721:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_722
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_722:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_723
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_723:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_724
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_724:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_728
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_728:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_729
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_729:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_730
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_730:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_731
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_731:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_736
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_736:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_737
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_737:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_738
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_738:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_739
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_739:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_740
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_740:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_741
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_741:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_746
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_746:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_747
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_747:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_748
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_748:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_749
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_749:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_750
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_750:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_751
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_751:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_752
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_752:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_760
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_760:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_761
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_761:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_762
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_762:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_766
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_766:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_767
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_767:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_768
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_768:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_769
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_769:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_777
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_777:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_778
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_778:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_779
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_779:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_780
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_780:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_786
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_786:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_787
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_787:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_788
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_788:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_792
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_792:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_793
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_793:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_794
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_794:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_795
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_795:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_800
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_800:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_801
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_801:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_802
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_802:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_803
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_803:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_804
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_804:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_805
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_805:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_812
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_812:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_813
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_813:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_814
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_814:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_815
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_815:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_819
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_819:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_820
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_820:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_821
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_821:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_822
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_822:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_827
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_827:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_828
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_828:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_829
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_829:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_830
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_830:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_831
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_831:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_832
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_832:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_837
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_837:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_838
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_838:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_839
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_839:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_840
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_840:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_841
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_841:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_842
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_842:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_846
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_846:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_847
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_847:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_848
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_848:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_849
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_849:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_854
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_854:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_855
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_855:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_856
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_856:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_857
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_857:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_858
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_858:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_859
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_859:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_860
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_860:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_861
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_861:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_872
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_872:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_873
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_873:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_874
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_874:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_879
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_879:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_880
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_880:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_881
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_881:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_886
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_886:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_887
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_887:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_888
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_888:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_889
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_889:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_890
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_890:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_891
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_891:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_895
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_895:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_896
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_896:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_897
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_897:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_898
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_898:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_904
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_904:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_905
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_905:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_906
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_906:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_911
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_911:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_912
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_912:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_913
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_913:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_918
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_918:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_919
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_919:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_920
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_920:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_921
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_921:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_922
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_922:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_923
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_923:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_929
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_929:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_930
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_930:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_931
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_931:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_935
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_935:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_936
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_936:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_937
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_937:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_938
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_938:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_946
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_946:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_947
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_947:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_948
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_948:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_949
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_949:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_955
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_955:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_956
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_956:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_957
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_957:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_961
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_961:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_962
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_962:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_963
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_963:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_964
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_964:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_969
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_969:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_970
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_970:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_971
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_971:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_972
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_972:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_973
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_973:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_974
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_974:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_981
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_981:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_982
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_982:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_983
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_983:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_984
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_984:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_988
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_988:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_989
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_989:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_990
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_990:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_991
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_991:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_996
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_996:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_997
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_997:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_998
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_998:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_999
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_999:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1000
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1000:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1001
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1001:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1006
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1006:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1007
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1007:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1008
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1008:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1009
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1009:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1010
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1010:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1011
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1011:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1012
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1012:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1013
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1013:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1020
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1020:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1021
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1021:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1022
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1022:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1028
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1028:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1029
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1029:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1030
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1030:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1035
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1035:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1036
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1036:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1037
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1037:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1042
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1042:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1043
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1043:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1044
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1044:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1045
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1045:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1046
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1046:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1047
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1047:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1053
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1053:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1054
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1054:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1055
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1055:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1059
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1059:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1060
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1060:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1061
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1061:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1062
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1062:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1070
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1070:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1071
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1071:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1072
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1072:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1073
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1073:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1079
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1079:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1080
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1080:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1081
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1081:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1085
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1085:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1086
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1086:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1087
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1087:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1088
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1088:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1093
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1093:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1094
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1094:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1095
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1095:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1096
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1096:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1097
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1097:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1098
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1098:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1105
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1105:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1106
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1106:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1107
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1107:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1108
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1108:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1112
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1112:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1113
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1113:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1114
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1114:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1115
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1115:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1120
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1120:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1121
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1121:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1122
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1122:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1123
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1123:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1124
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1124:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1125
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1125:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1130
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1130:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1131
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1131:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1132
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1132:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1133
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1133:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1134
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1134:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1135
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1135:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1136
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1136:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1137
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1137:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1143
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1143:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1144
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1144:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1145
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1145:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1152
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1152:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1153
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1153:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1154
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1154:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1155
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1155:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1159
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1159:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1160
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1160:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1161
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1161:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1162
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1162:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1167
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1167:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1168
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1168:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1169
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1169:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1170
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1170:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1171
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1171:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1172
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1172:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1177
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1177:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1178
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1178:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1179
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1179:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1186
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1186:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1187
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1187:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1188
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1188:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1189
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1189:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1193
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1193:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1194
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1194:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1195
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1195:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1196
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1196:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1201
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1201:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1202
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1202:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1203
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1203:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1204
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1204:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1205
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1205:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1206
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1206:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1207
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1207:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1208
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1208:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1213
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1213:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1214
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1214:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1215
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1215:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1216
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1216:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1217
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1217:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1218
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1218:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1226
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1226:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1227
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1227:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1228
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1228:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1234
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1234:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1235
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1235:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1236
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1236:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1241
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1241:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1242
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1242:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1243
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1243:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1248
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1248:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1249
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1249:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1250
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1250:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1251
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1251:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1252
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1252:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1253
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1253:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1259
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1259:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1260
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1260:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1261
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1261:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1265
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1265:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1266
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1266:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1267
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1267:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1268
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1268:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1276
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1276:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1277
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1277:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1278
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1278:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1279
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1279:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1285
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1285:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1286
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1286:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1287
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1287:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1291
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1291:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1292
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1292:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1293
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1293:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1294
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1294:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1299
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1299:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1300
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1300:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1301
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1301:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1302
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1302:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1303
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1303:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1304
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1304:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1311
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1311:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1312
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1312:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1313
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1313:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1314
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1314:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1318
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1318:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1319
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1319:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1320
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1320:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1321
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1321:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1326
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1326:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1327
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1327:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1328
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1328:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1329
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1329:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1330
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1330:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1331
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1331:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1336
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1336:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1337
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1337:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1338
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1338:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1339
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1339:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1340
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1340:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1341
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1341:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1342
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1342:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1343
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1343:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1350
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1350:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1351
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1351:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1352
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1352:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1359
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1359:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1360
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1360:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1361
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1361:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1362
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1362:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1366
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1366:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1367
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1367:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1368
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1368:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1369
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1369:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1374
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1374:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1375
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1375:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1376
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1376:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1377
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1377:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1378
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1378:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1379
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1379:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1384
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1384:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1385
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1385:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1386
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1386:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1387
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1387:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1388
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1388:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1393
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1393:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1394
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1394:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1395
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1395:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1402
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1402:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1403
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1403:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1404
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1404:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1405
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1405:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1409
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1409:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1410
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1410:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1411
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1411:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1412
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1412:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1417
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1417:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1418
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1418:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1419
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1419:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1420
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1420:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1421
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1421:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1422
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1422:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1423
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1423:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1424
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1424:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1432
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1432:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1433
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1433:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1434
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1434:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1439
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1439:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1440
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1440:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1441
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1441:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1446
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1446:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1447
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1447:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1448
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1448:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1449
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1449:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1450
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1450:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1451
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1451:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1457
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1457:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1458
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1458:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1459
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1459:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1463
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1463:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1464
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1464:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1465
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1465:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1466
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1466:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1474
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1474:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1475
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1475:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1476
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1476:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1477
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1477:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1483
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1483:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1484
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1484:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1485
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1485:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1489
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1489:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1490
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1490:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1491
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1491:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1492
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1492:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1497
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1497:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1498
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1498:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1499
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1499:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1500
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1500:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1501
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1501:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1502
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1502:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1509
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1509:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1510
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1510:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1511
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1511:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1512
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1512:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1516
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1516:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1517
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1517:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1518
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1518:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1519
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1519:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1524
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1524:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1525
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1525:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1526
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1526:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1527
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1527:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1528
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1528:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1529
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1529:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1534
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1534:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1535
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1535:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1536
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1536:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1537
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1537:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1538
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1538:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1539
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1539:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1540
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1540:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1548
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1548:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1549
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1549:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1550
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1550:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1554
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1554:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1555
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1555:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1556
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1556:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1557
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1557:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1565
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1565:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1566
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1566:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1567
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1567:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1568
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1568:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1574
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1574:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1575
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1575:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1576
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1576:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1580
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1580:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1581
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1581:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1582
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1582:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1583
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1583:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1588
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1588:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1589
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1589:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1590
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1590:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1591
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1591:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1592
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1592:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1593
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1593:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1600
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1600:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1601
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1601:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1602
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1602:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1603
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1603:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1607
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1607:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1608
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1608:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1609
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1609:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1610
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1610:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1615
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1615:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1616
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1616:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1617
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1617:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1618
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1618:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1619
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1619:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1620
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1620:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1625
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1625:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1626
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1626:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1627
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1627:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1628
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1628:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1629
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1629:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1630
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1630:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1634
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1634:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1635
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1635:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1636
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1636:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1637
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1637:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1642
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1642:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1643
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1643:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1644
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1644:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1645
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1645:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1646
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1646:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1647
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1647:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1652
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1652:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1653
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1653:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1654
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1654:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1661
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1661:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1662
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1662:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1663
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1663:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1664
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1664:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1668
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1668:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1669
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1669:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1670
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1670:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1671
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1671:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1676
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1676:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1677
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1677:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1678
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1678:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1679
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1679:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1680
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1680:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1681
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1681:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1682
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1682:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1683
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1683:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1688
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1688:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1689
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1689:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1690
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1690:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1691
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1691:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1692
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1692:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1693
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1693:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1699
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1699:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1700
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1700:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1701
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1701:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1706
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1706:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1707
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1707:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1708
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1708:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1713
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1713:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1714
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1714:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1715
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1715:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1716
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1716:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1717
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1717:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1718
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1718:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1724
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1724:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1725
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1725:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1726
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1726:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1730
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1730:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1731
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1731:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1732
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1732:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1733
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1733:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1741
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1741:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1742
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1742:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1743
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1743:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1744
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1744:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1750
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1750:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1751
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1751:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1752
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1752:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1756
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1756:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1757
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1757:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1758
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1758:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1759
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1759:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1764
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1764:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1765
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1765:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1766
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1766:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1767
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1767:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1768
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1768:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1769
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1769:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1776
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1776:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1777
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1777:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1778
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1778:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1779
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1779:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1783
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1783:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1784
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1784:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1785
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1785:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1786
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1786:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1791
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1791:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1792
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1792:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1793
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1793:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1794
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1794:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1795
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1795:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1796
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1796:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1801
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1801:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1802
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1802:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1803
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1803:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1804
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1804:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1805
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1805:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1806
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1806:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1807
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1807:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1808
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1808:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1814
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1814:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1815
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1815:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1816
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1816:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1820
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1820:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1821
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1821:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1822
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1822:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1823
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1823:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1831
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1831:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1832
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1832:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1833
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1833:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1834
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1834:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1840
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1840:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1841
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1841:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1842
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1842:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1846
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1846:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1847
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1847:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1848
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1848:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1849
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1849:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1854
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1854:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1855
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1855:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1856
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1856:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1857
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1857:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1858
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1858:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1859
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1859:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1866
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1866:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1867
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1867:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1868
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1868:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1869
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1869:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1873
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1873:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1874
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1874:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1875
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1875:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1876
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1876:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1881
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1881:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1882
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1882:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1883
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1883:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1884
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1884:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1885
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1885:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1886
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1886:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1891
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1891:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1892
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1892:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1893
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1893:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1894
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1894:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1895
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1895:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1896
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1896:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1897
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1897:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1898
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1898:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1904
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1904:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1905
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1905:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1906
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1906:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1910
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1910:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1911
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1911:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1912
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1912:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1913
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1913:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1921
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1921:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1922
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1922:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1923
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1923:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1924
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1924:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1930
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1930:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1931
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1931:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1932
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1932:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1936
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1936:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1937
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1937:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1938
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1938:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1939
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1939:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1944
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1944:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1945
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1945:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1946
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1946:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1947
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1947:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1948
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1948:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1949
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1949:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1956
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1956:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1957
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1957:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1958
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1958:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1959
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1959:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1963
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1963:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1964
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1964:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1965
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1965:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1966
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1966:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1971
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1971:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1972
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1972:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1973
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1973:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1974
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1974:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1975
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1975:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1976
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1976:
            ;                     finish generate applic
push rax

            push 1  ; number of args
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1981
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1981:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1982
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1982:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1983
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1983:
            ;                     finish generate applic
push rax

            push 1  ; number of args
mov rax, qword [rbp + 8*2]
                                                              
 mov rax, qword[rax +0]
                                                              
 mov rax, qword[rax +0]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1984
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1984:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1985
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1985:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1986
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1986:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1987
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1987:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1988
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1988:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1989
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1989:
            ;                     finish generate applic
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1990
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1990:
            ;                     finish generate applic
            mov rsi, rax
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE         ; check if rax is clouser
            jne Exit_applic_438
            CLOSURE_ENV rsi, rax      ; get env from closure
            push rsi                  ; push env
            push qword [rbp + 8 * 1]  ; old ret addr

            ;                       fixing the stack
            push qword[rbp]
            mov rsi, rax              ; mov closure pointer to rsi
            mov rax, rbp              ; save rbp in rax
            mov r8, [rbp+3*8]         ; arg count
            ;;sub r8, 1                 ; we want to get arg i in place i-1
            add r8, 4 
            shl r8, 3
            add rax, r8      
            mov rcx, rbp              ; rcx address first obj of this stack
            sub rcx, 8 
Loop122:
              cmp rcx, rsp            ;end of new stack
              jl Change122
              mov rbx, [rcx]
              mov [rax], rbx
              sub rcx, 8
              sub rax, 8
              jmp Loop122
Change122:
              mov rsp, rax
              add rsp, 8
              pop rbp
            ;                       finish fixing the stack

        CLOSURE_CODE rsi, rsi
        jmp rsi                    ; push env, call code 
Exit_applic_438:
        ;                           finish generate applic tp
 leave
             
 ret
         
 Lcont165:
         ;                    finish generate lambda simple
 leave
             
 ret
         
 Lcont163:
         ;                    finish generate lambda simple
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1991
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1991:
            ;                     finish generate applic
mov [fvar_tbl+48*WORD_SIZE], rax ; insert var to free var table
mov rax, SOB_VOID_ADDRESS ; define return void
          ;                       finish generate def
	call write_sob_if_not_void

;                  generate applic
push SOB_NIL_ADDRESS ; magic
mov rax, const_tbl +85; insert const from const table to rax
push rax

            push 1  ; number of args
mov rax, qword [fvar_tbl + 384]
            mov rsi, rax  ; move the rator to rsi
            mov bl, byte [rsi]
            cmp bl, T_CLOSURE
            jne Exit_applic_1993
            CLOSURE_ENV rsi, rax
            push rsi ;push env
            CLOSURE_CODE rsi, rax
            call rsi ;call code
            add rsp, 8*1 ;pop Env
            pop rbx ;pop arg count   
            add rbx, 1 ; including magic    
            shl rbx, 3 ;rbx=rbx*8
            add rsp,rbx ;pop args
Exit_applic_1993:
            ;                     finish generate applic
	call write_sob_if_not_void;;; Clean up the dummy frame, set the exit status to 0 ("success"), 
   ;;; and return from main
   pop rbp
   add rsp, 3*8
   mov rax, 0

   ret
boolean?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_BOOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

flonum?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_FLOAT
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

rational?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_RATIONAL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

pair?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_PAIR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

null?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_NIL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CHAR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_STRING
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

symbol?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_SYMBOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

procedure?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CLOSURE
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

div:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .div_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  divsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .div_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          MAKE_RATIONAL(rax, rdx, rdi)
         mov PVAR(1), rax
         pop rbp
         jmp mul
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

mul:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .mul_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  mulsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .mul_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

add:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .add_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  addsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .add_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdx
	 imul rdi, rcx
	 add rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

eq:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .eq_rat
             FLOAT_VAL rsi, rsi
	 FLOAT_VAL rdi, rdi
	 cmp rsi, rdi
             jmp .op_return
          .eq_rat:
             NUMERATOR rcx, rsi
	 NUMERATOR rdx, rdi
	 cmp rcx, rdx
	 jne .false
	 DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 cmp rcx, rdx
         .false:
          .op_return:
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

lt:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .lt_rat
             FLOAT_VAL rsi, rsi
	 movq xmm0, rsi
	 FLOAT_VAL rdi, rdi
	 movq xmm1, rdi
	 cmpltpd xmm0, xmm1
         movq rsi, xmm0
         cmp rsi, 0
             jmp .op_return
          .lt_rat:
             DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 NUMERATOR rsi, rsi
	 NUMERATOR rdi, rdi
	 imul rsi, rdx
	 imul rdi, rcx
	 cmp rsi, rdi
          .op_return:
      jl .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string_length:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	STRING_LENGTH rsi, rsi
         MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

string_ref:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         mov sil, byte [rsi]
         MAKE_CHAR(rax, sil)
         pop rbp
         ret

string_set:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov rdx, PVAR(2)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         CHAR_VAL rax, rdx
         mov byte [rsi], al
         mov rax, SOB_VOID_ADDRESS
         pop rbp
         ret

make_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	NUMERATOR rsi, rsi
         CHAR_VAL rdi, rdi
         and rdi, 255
         MAKE_STRING rax, rsi, dil
         pop rbp
         ret

symbol_to_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	SYMBOL_VAL rsi, rsi
	 STRING_LENGTH rcx, rsi
	 STRING_ELEMENTS rdi, rsi
	 push rcx
	 push rdi
	 mov dil, byte [rdi]
	 MAKE_CHAR(rax, dil)
	 push rax
	 MAKE_RATIONAL(rax, rcx, 1)
	 push rax
	 push 2
	 push SOB_NIL_ADDRESS
	 call make_string
	 add rsp, 4*8
	 STRING_ELEMENTS rsi, rax   
	 pop rdi
	 pop rcx
	 cmp rcx, 0
	 je .end
         .loop:
	 lea r8, [rdi+rcx]
	 lea r9, [rsi+rcx]
	 mov bl, byte [r8]
	 mov byte [r9], bl
	 loop .loop
         .end:
         pop rbp
         ret

eq?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	cmp rsi, rdi
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char_to_integer:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	CHAR_VAL rsi, rsi
	 and rsi, 255
	 MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

integer_to_char:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 and rsi, 255
	 MAKE_CHAR(rax, sil)
         pop rbp
         ret

exact_to_inexact:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rdi, rsi
	 NUMERATOR rsi, rsi 
	 cvtsi2sd xmm0, rsi
	 cvtsi2sd xmm1, rdi
	 divsd xmm0, xmm1
	 movq rsi, xmm0
	 MAKE_FLOAT(rax, rsi)
         pop rbp
         ret

numerator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

denominator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

cons:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	MAKE_PAIR (rax, rsi, rdi)
         pop rbp
         ret

car:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	CAR rax, rsi
         pop rbp
         ret

cdr:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	CDR rax, rsi
         pop rbp
         ret

set_car:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov qword [rsi + 1], rdi
	 mov rax, SOB_VOID_ADDRESS
         pop rbp
         ret

set_cdr:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov qword [rsi + 9], rdi
   mov rax, SOB_VOID_ADDRESS
         pop rbp
         ret

apply:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	
        mov rax, [rbp+8*3]    ; rax = arg number
        cmp rax, 2            ; regular case
        je .reg_case

        lea rdi, [rbp+8*(rax+3)]  ; last arg in
        mov rcx, rax
        sub rcx, 2    ; number of loops

        .create_new_list:
          mov r8, [rdi-8] ;car
          mov r9, [rdi]   ;cdr
          MAKE_PAIR(rbx, r8, r9)
          sub rdi, 8
          mov [rdi], rbx
          loop .create_new_list

          mov rdi, [rdi]

        .reg_case:
        mov rcx, 0    ; count of args in args
        mov rbx, rdi  ; pointer to list
        mov rax, 0    ; make rax 0 to compare byte of type
        push SOB_NIL_ADDRESS  ;push magic
        .loop:
          mov al, byte [rbx]
          cmp al, T_NIL     ; check if finished the list
          je .cont_reverse
          inc rcx
          push qword [rbx+1]    ; push arg (rbx.car)
          mov rbx, [rbx+9]      ; rbx = rbx.cdr
          jmp .loop

        .cont_reverse:
          mov r8, rsp             ; pointer to bottom arg
          lea r9, [rsp+8*(rcx-1)] ; pointer to upper arg
          .reverse_loop:
            cmp r9, r8
            jle .cont
            mov r10, [r8] ; tmp1 =[r8]
            mov r11, [r9] ; tmp2 = [r9]
            mov [r9], r10 ; [r9] = tmp1 = [r8]
            mov [r8], r11 ; [r8] = tmp2 = [r9]
            sub r9, 8
            add r8, 8
            jmp .reverse_loop

        .cont:
          push rcx                  ;; push arg count
          cmp byte [rsi], T_CLOSURE
          ;;jne ERROR
          push qword [rsi+1]        ;; push env
          push qword [rbp+8*1]      ;; father function ret address

          mov r8, [rbp]             ;; save old rbp
          add rcx, 4                ;; number of loops needed--3
          mov rbx, [rbp+ 8*3]       ;; father function arg count 
          lea rdx, [rbp+8*(rbx+4)]  ;; last father function argument --3
          mov r9, [rsp+2*8]         ;; new arg count
          lea r9, [rsp + 8*(3+r9)]  ;; new function last arg --2

          .loop_applyTP:
            mov rax, [r9]
            mov qword [rdx], rax
            sub r9, 8
            sub rdx, 8
            loop .loop_applyTP
            mov rbp, r8
            lea rsp, [rdx+8]
            jmp qword [rsi+9]  ; closure code is at SOB_CLOSURE + 9
            
         pop rbp
         ret

gcd:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	xor rdx, rdx
	 NUMERATOR rax, rsi
         NUMERATOR rdi, rdi
         .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	 mov rdx, rax
         cmp rdx, 0
         jge .make_result
         neg rdx
         .make_result:
         MAKE_RATIONAL(rax, rdx, 1)
         pop rbp
         ret